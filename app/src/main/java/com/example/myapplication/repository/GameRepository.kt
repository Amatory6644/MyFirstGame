package com.example.myapplication.repository

import android.util.Log
import com.example.myapplication.PlayerData
import com.example.myapplication.OtherPlayer
import com.example.myapplication.AuthResponse
import com.example.myapplication.InviteRequest
import com.example.myapplication.GroupInfo
import com.example.myapplication.GroupInviteRequest
import com.example.myapplication.GroupInviteResponse
import com.example.myapplication.GroupInviteAcceptRequest
import com.example.myapplication.GroupStats
import com.example.myapplication.GroupStatsInfo
import com.example.myapplication.logging.GameLogger
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.get
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

class GameRepository(
    private val httpClient: HttpClient,
    private val gameLogger: GameLogger,
    private val baseUrl: String = "http://192.168.0.105:8080",
    private val wsBaseUrl: String = "ws://192.168.0.105:8080"
) {
    
    companion object {
        private const val TAG = "GameRepository"
    }
    
    // SharedFlow –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket –∫ ViewModel
    private val _playerUpdates = MutableSharedFlow<PlayerData>()
    val playerUpdates = _playerUpdates.asSharedFlow()
    
    private val _otherPlayersUpdates = MutableSharedFlow<List<PlayerData>>()
    val otherPlayersUpdates = _otherPlayersUpdates.asSharedFlow()
    
    private val _connectionStatus = MutableSharedFlow<ConnectionStatus>()
    val connectionStatus = _connectionStatus.asSharedFlow()
    
    private val _gameStartedNotifications = MutableSharedFlow<GameStartedNotification>()
    val gameStartedNotifications = _gameStartedNotifications.asSharedFlow()
    
    // WebSocket —Å–µ—Å—Å–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private var gameWebSocketSession: io.ktor.websocket.WebSocketSession? = null
    
    sealed class ConnectionStatus {
        object Connected : ConnectionStatus()
        object Disconnected : ConnectionStatus()
        data class Error(val message: String, val exception: Exception? = null) : ConnectionStatus()
    }
    
    data class GameStartedNotification(
        val type: String = "game_started",
        val groupId: String,
        val message: String
    )
    
    // HTTP –º–µ—Ç–æ–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    suspend fun authenticateUser(action: String, login: String, password: String): AuthResponse {
        return try {
            Log.d(TAG, "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $action, $login")
            
            val response = httpClient.post("$baseUrl/auth") {
                contentType(ContentType.Application.Json)
                setBody(mapOf(
                    "action" to action,
                    "login" to login,
                    "password" to password
                ))
            }
            
            val authResponse = response.body<AuthResponse>()
            Log.d(TAG, "–û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $authResponse")
            
            authResponse
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}", e)
        }
    }
    
    suspend fun sendInvite(inviteRequest: InviteRequest): Boolean {
        return try {
            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $inviteRequest")
            
            val response = httpClient.post("$baseUrl/invite") {
                contentType(ContentType.Application.Json)
                setBody(inviteRequest)
            }
            
            val success = response.status.value in 200..299
            Log.d(TAG, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $success")
            
            success
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
        }
    }
    
    // WebSocket –º–µ—Ç–æ–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    suspend fun connectToGame(route: String, playerData: PlayerData): Flow<Unit> = flow {
        try {
            Log.d(TAG, "üî¥ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ò–ì–†–ï: $wsBaseUrl$route")
            Log.d(TAG, "üî¥ –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–ê: $playerData")
            _connectionStatus.emit(ConnectionStatus.Connected)
            
            httpClient.webSocket("$wsBaseUrl$route") {
                Log.d(TAG, "üü¢ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                gameWebSocketSession = this
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                send(Json.encodeToString(playerData))
                Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞: $playerData")
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                try {
                    Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                    Log.d(TAG, "üîµ WebSocket —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ${this.isActive}")
                    Log.d(TAG, "üîµ –í—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª: ${incoming}")
                    Log.d(TAG, "üîµ –ò–≥—Ä–æ–∫: ${playerData.login} —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
                    
                    var messageCount = 0
                    var lastMessageTime = System.currentTimeMillis()
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    val connectionCheckJob = kotlinx.coroutines.GlobalScope.launch {
                        while (true) {
                            kotlinx.coroutines.delay(5000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                            val currentTime = System.currentTimeMillis()
                            val timeSinceLastMessage = currentTime - lastMessageTime
                            Log.d(TAG, "üîç [${playerData.login}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–π=$messageCount, –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è=${timeSinceLastMessage}ms")
                            
                            if (timeSinceLastMessage > 30000) { // 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                                Log.w(TAG, "‚ö†Ô∏è [${playerData.login}] –î–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!")
                            }
                        }
                    }
                    
                    for (message in incoming) {
                        messageCount++
                        lastMessageTime = System.currentTimeMillis()
                        Log.d(TAG, "üîµ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #$messageCount –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        when (message) {
                            is Frame.Text -> {
                                val text = message.readText()
                                Log.d(TAG, "üîµ –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –°–ï–†–í–ï–†–ê: $text")
                                Log.d(TAG, "–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${text.length}, –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: ${text.take(50)}")
                                processIncomingMessage(text)
                            }
                            is Frame.Close -> {
                                connectionCheckJob.cancel()
                                Log.d(TAG, "üî¥ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${playerData.login}")
                                Log.d(TAG, "üî¥ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: $messageCount")
                                Log.d(TAG, "üî¥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${System.currentTimeMillis() - lastMessageTime}ms")
                                gameWebSocketSession = null
                                _connectionStatus.emit(ConnectionStatus.Disconnected)
                                break
                            }
                            is Frame.Ping -> {
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω Ping, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Pong")
                                send(Frame.Pong(message.buffer))
                            }
                            is Frame.Pong -> {
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω Pong")
                            }
                            else -> { 
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ—Ä–µ–π–º–∞: ${message::class.simpleName}")
                            }
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "üî¥ –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï WebSocket –°–û–û–ë–©–ï–ù–ò–ô –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerData.login}: ${e.message}", e)
                    e.printStackTrace()
                    _connectionStatus.emit(ConnectionStatus.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${e.message}", e))
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "üî¥ –û–®–ò–ë–ö–ê WebSocket –°–û–ï–î–ò–ù–ï–ù–ò–Ø: ${e.message}", e)
            e.printStackTrace()
            _connectionStatus.emit(ConnectionStatus.Error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}", e))
            throw NetworkException("–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}", e)
        }
    }
    
    suspend fun sendPlayerUpdate(playerData: PlayerData) {
        try {
            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞: $playerData")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
            gameWebSocketSession?.let { session ->
                val message = Json.encodeToString(playerData)
                session.send(message)
                Log.d(TAG, "–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket: $message")
            } ?: run {
                Log.w(TAG, "WebSocket —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${e.message}", e)
        }
    }
    
    private suspend fun processIncomingMessage(message: String) {
        try {
            Log.d(TAG, "üü° –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø: $message")
            when {
                message.startsWith("player") -> {
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "player" –∏ –ø–∞—Ä—Å–∏–º JSON
                    val jsonPart = message.substring("player".length)
                    Log.d(TAG, "–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: $jsonPart")
                    val playerData = Json.decodeFromString<PlayerData>(jsonPart)
                    Log.d(TAG, "–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞: $playerData")
                    Log.d(TAG, "–≠–º–∏—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${playerData.login} –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
                    // –≠–º–∏—Ç–∏–º –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ)
                    _otherPlayersUpdates.emit(listOf(playerData))
                }
                message.startsWith("otherPlayers") -> {
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "otherPlayers" –∏ –ø–∞—Ä—Å–∏–º JSON
                    val jsonPart = message.substring("otherPlayers".length)
                    Log.d(TAG, "–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: $jsonPart")
                    val playersData = Json.decodeFromString<OtherPlayer>(jsonPart)
                    Log.d(TAG, "–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: ${playersData.player.size} –∏–≥—Ä–æ–∫–æ–≤")
                    _otherPlayersUpdates.emit(playersData.player)
                }
                message.startsWith("[") && message.contains("login") -> {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
                    val playersArray = Json.decodeFromString<List<PlayerData>>(message)
                    Log.d(TAG, "–û–±—Ä–∞–±–æ—Ç–∞–Ω –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤: ${playersArray.size} –∏–≥—Ä–æ–∫–æ–≤")
                    _otherPlayersUpdates.emit(playersArray)
                }
                message.contains("\"type\":\"game_started\"") -> {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                    val notification = Json.decodeFromString<GameStartedNotification>(message)
                    Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã: $notification")
                    _gameStartedNotifications.emit(notification)
                }
                else -> {
                    Log.d(TAG, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: $message")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}", e)
            Log.e(TAG, "–ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: $message")
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
    }
    
    // –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    suspend fun sendGroupInvite(inviteRequest: GroupInviteRequest): GroupInviteResponse {
        return try {
            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $inviteRequest")
            
            val response = httpClient.post("$baseUrl/group/invite") {
                contentType(ContentType.Application.Json)
                setBody(inviteRequest)
            }
            
            val inviteResponse = response.body<GroupInviteResponse>()
            Log.d(TAG, "–û—Ç–≤–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $inviteResponse")
            
            inviteResponse
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
        }
    }
    
    suspend fun acceptGroupInvite(acceptRequest: GroupInviteAcceptRequest): Boolean {
        return try {
            Log.d(TAG, "–ü—Ä–∏–Ω—è—Ç–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $acceptRequest")
            
            val response = httpClient.post("$baseUrl/group/accept") {
                contentType(ContentType.Application.Json)
                setBody(acceptRequest)
            }
            
            val success = response.status.value in 200..299
            Log.d(TAG, "–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: $success")
            
            success
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${e.message}", e)
        }
    }
    
    suspend fun getAllGroups(): List<GroupInfo> {
        return try {
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")
            
            val response = httpClient.get("$baseUrl/groups")
            val groups = response.body<List<GroupInfo>>()
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.size}")
            
            groups
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: ${e.message}", e)
        }
    }
    
    suspend fun getGroupInvites(playerLogin: String): List<GroupInviteRequest> {
        return try {
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞: $playerLogin")
            
            val response = httpClient.get("$baseUrl/group/invites/$playerLogin")
            val invites = response.body<List<GroupInviteRequest>>()
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invites.size}")
            
            invites
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${e.message}", e)
        }
    }
    
    suspend fun startGroupGame(groupId: String): Boolean {
        return try {
            Log.d(TAG, "–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: $groupId")
            
            val response = httpClient.post("$baseUrl/group/$groupId/start")
            val success = response.status.value in 200..299
            Log.d(TAG, "–ò–≥—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–ø—É—â–µ–Ω–∞: $success")
            
            success
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
        }
    }
    
    suspend fun finishGroupGame(groupId: String): Boolean {
        return try {
            Log.d(TAG, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: $groupId")
            
            val response = httpClient.post("$baseUrl/group/$groupId/finish")
            val success = response.status.value in 200..299
            Log.d(TAG, "–ò–≥—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $success")
            
            success
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
        }
    }
    
    suspend fun createGroup(groupInfo: GroupInfo): GroupInviteResponse {
        return try {
            Log.d(TAG, "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: $groupInfo")
            
            val response = httpClient.post("$baseUrl/group/create") {
                contentType(ContentType.Application.Json)
                setBody(groupInfo)
            }
            
            val result = response.body<GroupInviteResponse>()
            Log.d(TAG, "–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: $result")
            
            result
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${e.message}", e)
        }
    }
    
    suspend fun createRoom(createRoomRequest: Map<String, Any>): Map<String, String> {
        return try {
            Log.d(TAG, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: $createRoomRequest")
            
            val response = httpClient.post("$baseUrl/group/create-room") {
                contentType(ContentType.Application.Json)
                setBody(createRoomRequest)
            }
            
            val roomInfo = response.body<Map<String, String>>()
            Log.d(TAG, "–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: $roomInfo")
            
            roomInfo
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${e.message}", e)
            throw NetworkException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${e.message}", e)
        }
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é
    suspend fun connectForNotifications(playerLogin: String): Flow<Unit> = flow {
        try {
            Log.d(TAG, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é: $wsBaseUrl/game?username=$playerLogin&groupId=menu")
            _connectionStatus.emit(ConnectionStatus.Connected)
            
            httpClient.webSocket("$wsBaseUrl/game?username=$playerLogin&groupId=menu") {
                Log.d(TAG, "WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                try {
                    for (message in incoming) {
                        when (message) {
                            is Frame.Text -> {
                                val text = message.readText()
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é: $text")
                                processIncomingMessage(text)
                            }
                            is Frame.Close -> {
                                Log.d(TAG, "WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
                                _connectionStatus.emit(ConnectionStatus.Disconnected)
                                break
                            }
                            is Frame.Ping -> {
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω Ping –≤ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Pong")
                                send(Frame.Pong(message.buffer))
                            }
                            is Frame.Pong -> {
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω Pong –≤ –º–µ–Ω—é")
                            }
                            else -> { 
                                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ—Ä–µ–π–º–∞ –≤ –º–µ–Ω—é: ${message::class.simpleName}")
                            }
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é: ${e.message}", e)
                    _connectionStatus.emit(ConnectionStatus.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${e.message}", e))
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é: ${e.message}", e)
            _connectionStatus.emit(ConnectionStatus.Error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é: ${e.message}", e))
            throw NetworkException("–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é: ${e.message}", e)
        }
    }
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
class NetworkException(
    message: String,
    cause: Throwable? = null
) : Exception(message, cause)
